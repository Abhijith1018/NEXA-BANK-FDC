openapi: 3.1.0
info:
  title: Product and Pricing Management API
  description: |-
    # Comprehensive Banking Product & Pricing Management System

    ## Overview
    Enterprise-grade RESTful API for managing financial products, pricing structures, and product configurations in banking and financial institutions. This system provides complete lifecycle management for various financial products including Savings Accounts, Current Accounts, Fixed Deposits, Loans, Credit Cards, and more.

    ## Key Features
    - **Product Management**: Create, update, retrieve, and manage financial products with comprehensive attributes
    - **Interest Rate Configuration**: Define simple and compound interest rates with tiered structures
    - **Charge & Fee Management**: Configure product charges, fees, and pricing models
    - **Balance Configuration**: Set minimum balance requirements, overdraft limits, and balance types
    - **Business Rules Engine**: Define eligibility criteria, validation rules, and business logic
    - **Transaction Types**: Configure allowed transaction types, limits, and channel availability
    - **Communication Templates**: Manage customer notifications and communication workflows
    - **Role-Based Access Control**: Define permissions and approval workflows

    ## API Design Principles
    - **RESTful Architecture**: Standard HTTP methods (GET, POST, PUT, DELETE)
    - **Code-Based Routing**: All endpoints use business-friendly codes instead of technical IDs
    - **Pagination Support**: Efficient data retrieval with page, size, and sort parameters
    - **Comprehensive Validation**: Request validation using Jakarta Bean Validation
    - **Audit Trail**: Automatic tracking of created/updated by and timestamps
    - **Error Handling**: Standardized error responses with meaningful messages

    ## Response Codes
    - **200 OK**: Successful GET/PUT request
    - **201 Created**: Successful POST request with resource creation
    - **204 No Content**: Successful DELETE request
    - **400 Bad Request**: Invalid request data or validation failure
    - **404 Not Found**: Resource not found
    - **500 Internal Server Error**: Server-side error

    ## Getting Started
    1. Browse the API endpoints organized by functional areas
    2. Review the data models and required/optional fields
    3. Use the 'Try it out' feature to test endpoints
    4. Check example requests and responses for each operation

    ## Authentication
    This API requires authentication. Contact your system administrator for access credentials.

    ## Support
    For technical support, documentation, or API access requests, contact the Banking Labs support team.
  contact:
    name: Banking Labs Development Team
    url: https://www.bankinglabs.com/support
    email: support@bankinglabs.com
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Complete API Documentation & User Guide
  url: https://docs.bankinglabs.com/product-pricing-api
servers:
  - url: http://localhost:8080
    description: Local Development Server
  - url: https://api-dev.bankinglabs.com
    description: Development Environment
  - url: https://api-uat.bankinglabs.com
    description: User Acceptance Testing Environment
  - url: https://api.bankinglabs.com
    description: Production Environment
tags:
  - name: Product Interest Rates
    description: This API provides a structured rate card for financial products like fixed deposits. It allows for the retrieval of precise interest rates based on the product's term length. For each term, the API returns a set of rates corresponding to various payout schedules, including cumulative and non-cumulative (monthly, quarterly, yearly) options.
  - name: Product Transaction Types
    description: API for managing allowed transaction types and transaction configuration for products. Transaction configurations define which operations are permitted on a product (DEPOSIT, WITHDRAWAL, TRANSFER, PAYMENT, etc.), transaction limits, processing rules, and channel availability (ATM, ONLINE, BRANCH, MOBILE). Each transaction type includes minimum/maximum amount limits, daily limits, and frequency restrictions. Essential for channel management, fraud prevention, and customer service optimization.
  - name: Product Communication Templates
    description: API for managing customer communication templates and notification configurations for products. Communication templates define automated messages sent to customers for various events (ACCOUNT_OPENING, TRANSACTION_ALERT, STATEMENT_GENERATION, PAYMENT_DUE, etc.). Supports multiple communication channels (EMAIL, SMS, PUSH_NOTIFICATION, IN_APP, POSTAL_MAIL) and communication types (TRANSACTIONAL, PROMOTIONAL, REGULATORY, STATEMENT). Critical for customer engagement, compliance notifications, and regulatory reporting.
  - name: Product Balance Types
    description: 'API for defining which balance types are supported/applicable for a financial product. For example, a Loan product would have: LOAN_PRINCIPAL, LOAN_INTEREST, OVERDRAFT, PENALTY. A Fixed Deposit product would have: FD_PRINCIPAL, FD_INTEREST. This simply indicates which balance types are relevant for the product.'
  - name: Product Management
    description: Comprehensive API for managing financial products including creation, retrieval, update, deletion, and search operations. Products can be of various types (SAVINGS, CURRENT, LOAN, etc.) and contain detailed configuration for pricing, charges, balances, communication templates, and business rules.
  - name: Product Charges & Fees
    description: Comprehensive API for managing product charges, fees, and pricing structures. Charges include account maintenance fees, transaction fees, processing charges, penalty fees, and service charges. Supports various charge types (FIXED, PERCENTAGE), calculation methods, frequency configurations (ONE_TIME, MONTHLY, QUARTERLY, ANNUALLY), and debit/credit indicators. Essential for revenue generation and transparent customer pricing.
  - name: Product Roles & Permissions
    description: An API for managing which user roles can access a specific financial product. It establishes a simple mapping between a product and one or more roles (e.g., 'OWNER', 'CO_OWNER', 'GUARDIAN'), effectively creating an access list. This controls product visibility and eligibility at a high level.
  - name: Product Business Rules
    description: This API is the definitive source for managing all business rules that govern a financial product. It allows you to configure these rules as key attributes, including balance limits (min/max), conditional interest rate bonuses (e.g., for 'Gold members' or 'under 18'), and the primary interest calculation method (simple vs. compound with its frequency). It's the central hub for a product's entire configurable DNA and operational logic.
paths:
  /api/products/{productCode}:
    get:
      tags:
        - Product Management
      summary: Retrieve a specific product by its unique code
      description: 'Fetches complete details of a product identified by its unique product code. Returns comprehensive product information including all related entities: interest rates, charges, balances, roles, rules, transactions, and communication templates. This is the primary endpoint for retrieving detailed product information.'
      operationId: getProductByCode
      parameters:
        - name: productCode
          in: path
          description: Unique product code identifier (e.g., SAV001, CURR001, LOAN001). This is a business-friendly identifier used across the system.
          required: true
          schema:
            type: string
          example: SAV001
      responses:
        '200':
          description: Product found successfully. Returns complete product details with all nested entities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDTO'
              examples:
                Savings Product Example:
                  description: Savings Product Example
                  value:
                    productId: 123e4567-e89b-12d3-a456-426614174000
                    productCode: SAV001
                    productName: Premium Savings Account
        '404':
          description: Product not found with the specified product code. Verify the product code and try again.
          content:
            application/json:
              example:
                error: Resource not found
                message: 'Product not found: SAV001'
                timestamp: '2025-10-10T10:30:00'
        '500':
          description: Internal server error occurred while retrieving the product
          content:
            application/json: {}
    put:
      tags:
        - Product Management
      summary: Update an existing product
      description: 'Updates the details of an existing product identified by its product code. This endpoint allows modification of product attributes including name, description, status, pricing information, and effective dates. The product code in the path parameter identifies which product to update. Note: This updates only the core product details; use specific sub-resource endpoints to update interest rates, charges, balances, etc.'
      operationId: updateProduct
      parameters:
        - name: productCode
          in: path
          description: Unique product code of the product to be updated
          required: true
          schema:
            type: string
          example: SAV001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateProductRequestDTO'
        required: true
      responses:
        '200':
          description: Product updated successfully. Returns the updated product details with latest audit information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDTO'
        '400':
          description: 'Invalid request data. Possible reasons: - Missing required fields - Invalid enum values - Invalid date format or range - Product code mismatch'
          content:
            application/json:
              example:
                error: Validation failed
                message: Invalid product type
                timestamp: '2025-10-10T10:30:00'
        '404':
          description: Product not found with the specified product code
          content:
            application/json:
              example:
                error: Resource not found
                message: 'Product not found: SAV001'
                timestamp: '2025-10-10T10:30:00'
        '500':
          description: Internal server error occurred while updating the product
          content:
            application/json: {}
    delete:
      tags:
        - Product Management
      summary: Delete a product
      description: 'Permanently removes a product from the system identified by its product code. This operation is irreversible and will cascade delete all related entities including: interest rates, charges, balances, roles, rules, transactions, and communication templates. Use with caution in production environments. Consider deactivating products instead of deletion by updating their status to INACTIVE for audit trail purposes.'
      operationId: deleteProduct
      parameters:
        - name: productCode
          in: path
          description: Unique product code of the product to be deleted. This operation cannot be undone.
          required: true
          schema:
            type: string
          example: SAV001
      responses:
        '204':
          description: Product deleted successfully. No content returned. All related entities (interest rates, charges, balances, etc.) have also been removed.
          content:
            application/json: {}
        '404':
          description: Product not found with the specified product code. The product may have already been deleted.
          content:
            application/json:
              example:
                error: Resource not found
                message: 'Product not found: SAV001'
                timestamp: '2025-10-10T10:30:00'
        '500':
          description: Internal server error occurred while deleting the product. The product may be referenced by other entities or systems.
          content:
            application/json: {}
  /api/products/{productCode}/transactions/{transactionCode}:
    get:
      tags:
        - Product Transaction Types
      summary: Get a specific transaction
      operationId: getTransactionByCode
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: transactionCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
        '404':
          description: Transaction or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
    put:
      tags:
        - Product Transaction Types
      summary: Update a transaction
      operationId: updateTransaction
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: transactionCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductTransactionRequestDTO'
        required: true
      responses:
        '200':
          description: Transaction updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
        '400':
          description: Invalid transaction data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
        '404':
          description: Transaction or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
    delete:
      tags:
        - Product Transaction Types
      summary: Delete a transaction
      operationId: deleteTransaction
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: transactionCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Transaction deleted successfully
        '404':
          description: Transaction or product not found
  /api/products/{productCode}/rules/{ruleCode}:
    get:
      tags:
        - Product Business Rules
      summary: Get a specific rule
      operationId: getRuleByCode
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: ruleCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rule found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
        '404':
          description: Rule or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
    put:
      tags:
        - Product Business Rules
      summary: Update a rule
      operationId: updateRule
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: ruleCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRuleRequestDTO'
        required: true
      responses:
        '200':
          description: Rule updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
        '400':
          description: Invalid rule data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
        '404':
          description: Rule or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
    delete:
      tags:
        - Product Business Rules
      summary: Delete a rule
      operationId: deleteRule
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: ruleCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Rule deleted successfully
        '404':
          description: Rule or product not found
  /api/products/{productCode}/roles/{roleCode}:
    get:
      tags:
        - Product Roles & Permissions
      summary: Get a specific role
      operationId: getRoleByCode
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: roleCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Role found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
        '404':
          description: Role or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
    put:
      tags:
        - Product Roles & Permissions
      summary: Update a role
      operationId: updateRole
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: roleCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRoleRequestDTO'
        required: true
      responses:
        '200':
          description: Role updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
        '400':
          description: Invalid role data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
        '404':
          description: Role or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
    delete:
      tags:
        - Product Roles & Permissions
      summary: Delete a role
      operationId: deleteRole
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: roleCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Role deleted successfully
        '404':
          description: Role or product not found
  /api/products/{productCode}/interest-rates/{rateCode}:
    get:
      tags:
        - Product Interest Rates
      summary: Get a specific interest rate
      operationId: getInterestRateByCode
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: rateCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interest rate found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductInterestDTO'
        '404':
          description: Interest rate or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductInterestDTO'
    put:
      tags:
        - Product Interest Rates
      summary: Update an interest rate
      operationId: updateInterestRate
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: rateCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInterestRequestDTO'
        required: true
      responses:
        '200':
          description: Interest rate updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductInterestDTO'
        '400':
          description: Invalid interest rate data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductInterestDTO'
        '404':
          description: Interest rate or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductInterestDTO'
    delete:
      tags:
        - Product Interest Rates
      summary: Delete an interest rate
      operationId: deleteInterestRate
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: rateCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Interest rate deleted successfully
        '404':
          description: Interest rate or product not found
  /api/products/{productCode}/communications/{commCode}:
    get:
      tags:
        - Product Communication Templates
      summary: Get a specific communication
      operationId: getCommunicationByCode
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: commCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Communication found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
        '404':
          description: Communication or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
    put:
      tags:
        - Product Communication Templates
      summary: Update a communication
      operationId: updateCommunication
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: commCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCommunicationRequestDTO'
        required: true
      responses:
        '200':
          description: Communication updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
        '400':
          description: Invalid communication data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
        '404':
          description: Communication or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
    delete:
      tags:
        - Product Communication Templates
      summary: Delete a communication
      operationId: deleteCommunication
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: commCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Communication deleted successfully
        '404':
          description: Communication or product not found
  /api/products/{productCode}/charges/{chargeCode}:
    get:
      tags:
        - Product Charges & Fees
      summary: Get a specific charge
      operationId: getChargeByCode
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: chargeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Charge found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
        '404':
          description: Charge or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
    put:
      tags:
        - Product Charges & Fees
      summary: Update a charge
      operationId: updateCharge
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: chargeCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductChargeRequestDTO'
        required: true
      responses:
        '200':
          description: Charge updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
        '400':
          description: Invalid charge data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
        '404':
          description: Charge or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
    delete:
      tags:
        - Product Charges & Fees
      summary: Delete a charge
      operationId: deleteCharge
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: chargeCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Charge deleted successfully
        '404':
          description: Charge or product not found
  /api/products/{productCode}/balances/{balanceType}:
    get:
      tags:
        - Product Balance Types
      summary: Get a specific balance type for a product
      description: Returns details of a specific balance type if it's applicable for this product
      operationId: getBalanceByType
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: balanceType
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Balance type found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
        '404':
          description: Balance type not found or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
    put:
      tags:
        - Product Balance Types
      summary: Update a balance type
      description: Update properties of a balance type for this product
      operationId: updateBalance
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: balanceType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBalanceRequestDTO'
        required: true
      responses:
        '200':
          description: Balance type updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
        '400':
          description: Invalid balance type data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
        '404':
          description: Balance type not found or product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
    delete:
      tags:
        - Product Balance Types
      summary: Remove a balance type from a product
      description: Mark a balance type as no longer applicable for this product
      operationId: deleteBalance
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: balanceType
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Balance type removed successfully
        '404':
          description: Balance type not found or product not found
  /api/products:
    get:
      tags:
        - Product Management
      summary: Retrieve all products with pagination
      description: Fetches a paginated list of all products in the system. Supports sorting and pagination parameters. Use query parameters to control page size, page number, and sort order. Default page size is 20. Results include complete product details along with all related entities (interest rates, charges, balances, roles, rules, transactions, communications).
      operationId: getAllProducts
      parameters:
        - name: pageable
          in: query
          description: 'Pagination and sorting parameters. Example: ?page=0&size=20&sort=productName,asc - page: Page number (0-indexed, default: 0) - size: Number of items per page (default: 20, max: 100) - sort: Sort field and direction (e.g., productCode,desc)'
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          example: page=0&size=20&sort=productName,asc
      responses:
        '200':
          description: Successfully retrieved paginated list of products. Returns a Page object containing product details, total elements, total pages, current page number, and pagination metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '500':
          description: Internal server error occurred while fetching products
          content:
            application/json: {}
    post:
      tags:
        - Product Management
      summary: Create a new financial product
      description: Creates a new product in the system with comprehensive details including product type, status, currency, pricing information, and effective/expiry dates. The product code must be unique across the system. Upon successful creation, the product will be assigned a unique identifier and audit timestamps.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateProductRequestDTO'
        required: true
      responses:
        '201':
          description: Product created successfully. Returns the complete product details including system-generated ID and audit information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDTO'
        '400':
          description: 'Invalid request data. Possible reasons: - Missing required fields (productCode, productName, productType) - Invalid enum values for productType, status, or currency - Product code already exists - Invalid date format or date range'
          content:
            application/json:
              example:
                error: Validation failed
                message: Product code is required
                timestamp: '2025-10-10T10:30:00'
        '500':
          description: Internal server error occurred while processing the request
          content:
            application/json: {}
  /api/products/{productCode}/transactions:
    get:
      tags:
        - Product Transaction Types
      summary: Get all transactions for a product
      operationId: getTransactions
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductTransactionDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductTransactionDTO'
    post:
      tags:
        - Product Transaction Types
      summary: Add a new transaction to a product
      operationId: addTransaction
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductTransactionRequestDTO'
        required: true
      responses:
        '201':
          description: Transaction created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
        '400':
          description: Invalid transaction data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductTransactionDTO'
  /api/products/{productCode}/rules:
    get:
      tags:
        - Product Business Rules
      summary: Get all rules for a product
      operationId: getRules
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Rules retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductRuleDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductRuleDTO'
    post:
      tags:
        - Product Business Rules
      summary: Add a new rule to a product
      operationId: addRule
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRuleRequestDTO'
        required: true
      responses:
        '201':
          description: Rule created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
        '400':
          description: Invalid rule data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRuleDTO'
  /api/products/{productCode}/roles:
    get:
      tags:
        - Product Roles & Permissions
      summary: Get all roles for a product
      operationId: getRoles
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductRoleDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductRoleDTO'
    post:
      tags:
        - Product Roles & Permissions
      summary: Add a new role to a product
      operationId: addRole
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRoleRequestDTO'
        required: true
      responses:
        '201':
          description: Role created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
        '400':
          description: Invalid role data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductRoleDTO'
  /api/products/{productCode}/interest-rates:
    get:
      tags:
        - Product Interest Rates
      summary: Get all interest rates for a product
      operationId: getInterestRates
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Interest rates retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductInterestDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductInterestDTO'
    post:
      tags:
        - Product Interest Rates
      summary: Add a new interest rate configuration to a product
      description: Adds a specific interest rate to a product's rate card. This configuration is focused solely on the duration of the term and the credit frequency, linking them to a specific interest percentage. The underlying calculation rules (e.g., simple/compound) and compounding frequency are managed at the product level.
      operationId: addInterestRate
      parameters:
        - name: productCode
          in: path
          description: Product code to which the interest rate will be added
          required: true
          schema:
            type: string
          example: SAV001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInterestRequestDTO'
        required: true
      responses:
        '201':
          description: Interest rate created successfully. Returns the complete rate configuration with system-generated ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInterestDTO'
        '400':
          description: 'Invalid interest rate data. Possible reasons: - Missing required fields (rateCode, rateType, interestRate) - Invalid enum values - Rate code already exists for this product - Invalid date range - Invalid balance range (min > max)'
          content:
            application/json: {}
        '404':
          description: Product not found with the specified product code
          content:
            application/json: {}
        '500':
          description: Internal server error
          content:
            application/json: {}
  /api/products/{productCode}/communications:
    get:
      tags:
        - Product Communication Templates
      summary: Get all communications for a product
      operationId: getCommunications
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Communications retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductCommunicationDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductCommunicationDTO'
    post:
      tags:
        - Product Communication Templates
      summary: Add a new communication to a product
      operationId: addCommunication
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCommunicationRequestDTO'
        required: true
      responses:
        '201':
          description: Communication created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
        '400':
          description: Invalid communication data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductCommunicationDTO'
  /api/products/{productCode}/charges:
    get:
      tags:
        - Product Charges & Fees
      summary: Get all charges for a product
      operationId: getCharges
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Charges retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductChargeDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductChargeDTO'
    post:
      tags:
        - Product Charges & Fees
      summary: Add a new charge to a product
      operationId: addCharge
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductChargeRequestDTO'
        required: true
      responses:
        '201':
          description: Charge created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
        '400':
          description: Invalid charge data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductChargeDTO'
  /api/products/{productCode}/balances:
    get:
      tags:
        - Product Balance Types
      summary: Get all balance types for a product
      description: Returns all balance types that are applicable/supported for this product
      operationId: getBalances
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Balance types retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductBalanceDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProductBalanceDTO'
    post:
      tags:
        - Product Balance Types
      summary: Add a balance type to a product
      description: Marks a specific balance type as applicable for this product
      operationId: addBalance
      parameters:
        - name: productCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBalanceRequestDTO'
        required: true
      responses:
        '201':
          description: Balance type added successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
        '400':
          description: Invalid balance type or already exists
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
        '404':
          description: Product not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductBalanceDTO'
  /api/products/search:
    get:
      tags:
        - Product Management
      summary: Search and filter products
      description: Advanced search functionality to filter products based on multiple criteria. Supports filtering by product type (SAVINGS, CURRENT, LOAN, etc.), status (ACTIVE, INACTIVE, PENDING), and date range (effective date between start and end dates). All parameters are optional and can be combined. If no parameters are provided, returns all products. Date parameters should be in ISO format (YYYY-MM-DD).
      operationId: searchProducts
      parameters:
        - name: productType
          in: query
          description: 'Filter by product type. Valid values: SAVINGS, CURRENT, LOAN, CREDIT_CARD, FIXED_DEPOSIT, RECURRING_DEPOSIT. Case-insensitive. Returns all products of the specified type.'
          required: false
          schema:
            type: string
          example: SAVINGS
        - name: status
          in: query
          description: 'Filter by product status. Valid values: ACTIVE, INACTIVE, PENDING, SUSPENDED, CLOSED. Case-insensitive. Returns all products with the specified status.'
          required: false
          schema:
            type: string
          example: ACTIVE
        - name: startDate
          in: query
          description: 'Start date for date range filter (inclusive). Format: YYYY-MM-DD. Filters products by effective date. Must be used together with endDate parameter.'
          required: false
          schema:
            type: string
          example: '2025-01-01'
        - name: endDate
          in: query
          description: 'End date for date range filter (inclusive). Format: YYYY-MM-DD. Filters products by effective date. Must be used together with startDate parameter. Must be equal to or after startDate.'
          required: false
          schema:
            type: string
          example: '2025-12-31'
      responses:
        '200':
          description: Search completed successfully. Returns a list of products matching the specified criteria. Empty list is returned if no products match the search criteria.
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 'Invalid search parameters. Possible reasons: - Invalid product type or status enum value - Invalid date format (must be YYYY-MM-DD) - End date is before start date - Missing end date when start date is provided, or vice versa'
          content:
            application/json:
              example:
                error: Validation failed
                message: Invalid date format. Use ISO format (YYYY-MM-DD)
                timestamp: '2025-10-10T10:30:00'
        '500':
          description: Internal server error occurred while searching products
          content:
            application/json: {}
components:
  schemas:
    CreateOrUpdateProductRequestDTO:
      type: object
      description: 'Product creation request containing all required and optional product details. Required fields: productCode (unique), productName, productType. Optional fields: description, status, currency, dates, pricing information.'
      properties:
        productCode:
          type: string
          minLength: 1
        productName:
          type: string
          minLength: 1
        productType:
          type: string
        description:
          type: string
        currency:
          type: string
        status:
          type: string
        efctv_date:
          type: string
          format: date-time
        expr_date:
          type: string
          format: date-time
        interestType:
          type: string
        compoundingFrequency:
          type: string
      required:
        - currency
        - efctv_date
        - productCode
        - productName
        - productType
    ProductBalanceDTO:
      type: object
      properties:
        balanceId:
          type: string
          format: uuid
        balanceType:
          type: string
          enum:
            - LOAN_PRINCIPAL
            - LOAN_INTEREST
            - FD_PRINCIPAL
            - FD_INTEREST
            - OVERDRAFT
            - PENALTY
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    ProductChargeDTO:
      type: object
      properties:
        chargeId:
          type: string
          format: uuid
        chargeCode:
          type: string
        chargeType:
          type: string
          enum:
            - INTEREST
            - FEE
            - TAX
            - PENALTY
        calculationType:
          type: string
          enum:
            - FLAT
            - PERCENTAGE
        frequency:
          type: string
          enum:
            - ONE_TIME
            - MONTHLY
            - QUARTERLY
            - ANNUALLY
        amount:
          type: number
    ProductCommunicationDTO:
      type: object
      properties:
        commId:
          type: string
          format: uuid
        commCode:
          type: string
        communicationType:
          type: string
          enum:
            - ALERT
            - NOTICE
            - STATEMENT
        channel:
          type: string
          enum:
            - EMAIL
            - SMS
            - POST
        event:
          type: string
        template:
          type: string
    ProductDetailsDTO:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        productCode:
          type: string
        productName:
          type: string
        productType:
          type: string
          enum:
            - FIXED_DEPOSIT
            - SAVINGS
            - CURRENT
            - LOAN
        currency:
          type: string
          enum:
            - INR
            - JPY
            - AED
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DRAFT
        interestType:
          type: string
          enum:
            - SIMPLE
            - COMPOUND
        compoundingFrequency:
          type: string
          enum:
            - DAILY
            - MONTHLY
            - QUARTERLY
            - SEMI_ANNUALLY
            - ANNUALLY
        productRules:
          type: array
          items:
            $ref: '#/components/schemas/ProductRuleDTO'
        productCharges:
          type: array
          items:
            $ref: '#/components/schemas/ProductChargeDTO'
        productRoles:
          type: array
          items:
            $ref: '#/components/schemas/ProductRoleDTO'
        productTransactions:
          type: array
          items:
            $ref: '#/components/schemas/ProductTransactionDTO'
        productBalances:
          type: array
          items:
            $ref: '#/components/schemas/ProductBalanceDTO'
        productCommunications:
          type: array
          items:
            $ref: '#/components/schemas/ProductCommunicationDTO'
        createdAt:
          type: string
          format: date-time
        efctv_date:
          type: string
          format: date-time
    ProductRoleDTO:
      type: object
      properties:
        roleId:
          type: string
          format: uuid
        roleCode:
          type: string
        roleType:
          type: string
          enum:
            - OWNER
            - CO_OWNER
            - GUARDIAN
            - NOMINEE
            - BORROWER
            - GUARANTOR
        roleName:
          type: string
    ProductRuleDTO:
      type: object
      properties:
        ruleId:
          type: string
          format: uuid
        ruleCode:
          type: string
        ruleName:
          type: string
        ruleType:
          type: string
          enum:
            - SIMPLE
            - COMPLEX
        dataType:
          type: string
          enum:
            - NUMBER
            - TEXT
            - DATE
            - PERCENTAGE
            - CURRENCY
            - DURATION
            - FREQUENCY
            - AMOUNT_WITH_CURRENCY
            - JSON
            - JSON_MATRIX
        ruleValue:
          type: string
        validationType:
          type: string
          enum:
            - MIN_MAX
            - EXACT
            - LIST
    ProductTransactionDTO:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
        transactionCode:
          type: string
        transactionType:
          type: string
          enum:
            - DEPOSIT
            - WITHDRAWAL
            - INTEREST_ACCRUED
            - DISBURSEMENT
            - PAYMENT
        amountLimit:
          type: number
    ProductTransactionRequestDTO:
      type: object
      properties:
        transactionCode:
          type: string
          minLength: 1
        transactionName:
          type: string
          minLength: 1
        transactionType:
          type: string
        debitCreditIndicator:
          type: string
        minimumAmount:
          type: number
          format: double
        maximumAmount:
          type: number
          format: double
        description:
          type: string
        active:
          type: boolean
      required:
        - debitCreditIndicator
        - transactionCode
        - transactionName
        - transactionType
    ProductRuleRequestDTO:
      type: object
      properties:
        ruleCode:
          type: string
          minLength: 1
        ruleName:
          type: string
          minLength: 1
        ruleType:
          type: string
          enum:
            - SIMPLE
            - COMPLEX
        dataType:
          type: string
          enum:
            - NUMBER
            - TEXT
            - DATE
            - PERCENTAGE
            - CURRENCY
            - DURATION
            - FREQUENCY
            - AMOUNT_WITH_CURRENCY
            - JSON
            - JSON_MATRIX
        ruleValue:
          type: string
          minLength: 1
        validationType:
          type: string
          enum:
            - MIN_MAX
            - EXACT
            - LIST
      required:
        - dataType
        - ruleCode
        - ruleName
        - ruleType
        - ruleValue
        - validationType
    ProductRoleRequestDTO:
      type: object
      properties:
        roleCode:
          type: string
          minLength: 1
        roleName:
          type: string
          minLength: 1
        roleType:
          type: string
        description:
          type: string
        active:
          type: boolean
      required:
        - roleCode
        - roleName
        - roleType
    ProductInterestRequestDTO:
      type: object
      description: Interest rate configuration details including rate code, type, percentage, calculation method, balance ranges, and effective dates
      properties:
        rateCode:
          type: string
        termInMonths:
          type: integer
          format: int32
        rateCumulative:
          type: number
          minimum: 0
        rateNonCumulativeMonthly:
          type: number
          minimum: 0
        rateNonCumulativeQuarterly:
          type: number
          minimum: 0
        rateNonCumulativeYearly:
          type: number
          minimum: 0
      required:
        - rateCode
        - rateCumulative
        - rateNonCumulativeMonthly
        - rateNonCumulativeQuarterly
        - rateNonCumulativeYearly
        - termInMonths
    ProductInterestDTO:
      type: object
      properties:
        rateId:
          type: string
          format: uuid
        rateCode:
          type: string
        termInMonths:
          type: integer
          format: int32
        rateCumulative:
          type: number
        rateNonCumulativeMonthly:
          type: number
        rateNonCumulativeQuarterly:
          type: number
        rateNonCumulativeYearly:
          type: number
    ProductCommunicationRequestDTO:
      type: object
      properties:
        communicationCode:
          type: string
          minLength: 1
        communicationName:
          type: string
          minLength: 1
        communicationType:
          type: string
        templateContent:
          type: string
          minLength: 1
        description:
          type: string
        active:
          type: boolean
      required:
        - communicationCode
        - communicationName
        - communicationType
        - templateContent
    ProductChargeRequestDTO:
      type: object
      properties:
        chargeCode:
          type: string
          minLength: 1
        chargeName:
          type: string
          minLength: 1
        chargeType:
          type: string
          enum:
            - INTEREST
            - FEE
            - TAX
            - PENALTY
        calculationType:
          type: string
          enum:
            - FLAT
            - PERCENTAGE
        frequency:
          type: string
          enum:
            - ONE_TIME
            - MONTHLY
            - QUARTERLY
            - ANNUALLY
        chargeValue:
          type: number
        debitCredit:
          type: string
          enum:
            - DEBIT
            - CREDIT
      required:
        - calculationType
        - chargeCode
        - chargeName
        - chargeType
        - frequency
    ProductBalanceRequestDTO:
      type: object
      properties:
        balanceType:
          type: string
          enum:
            - LOAN_PRINCIPAL
            - LOAN_INTEREST
            - FD_PRINCIPAL
            - FD_INTEREST
            - OVERDRAFT
            - PENALTY
        isActive:
          type: boolean
      required:
        - balanceType
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    Page:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items: {}
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageProductTransactionDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductTransactionDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageProductRuleDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductRuleDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageProductRoleDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductRoleDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageProductInterestDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductInterestDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageProductCommunicationDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductCommunicationDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageProductChargeDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductChargeDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageProductBalanceDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductBalanceDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
